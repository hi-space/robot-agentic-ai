AWSTemplateFormatVersion: '2010-09-09'
Description: 'Robot Agentic API - API Gateway and Lambda functions'

Parameters:
  BucketName:
    Type: String
    Description: S3 bucket name for deployment packages
  Region:
    Type: String
    Default: us-east-1
    Description: AWS region

Resources:
  # DynamoDB Tables
  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatHistory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  RobotFeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RobotFeedback
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: message_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: message_id
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # SQS Queue for robot feedback
  RobotFeedbackQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: robot-feedback-queue
      VisibilityTimeoutSeconds: 300
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20  # Long polling

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ChatHistoryTable.Arn
                  - !GetAtt RobotFeedbackTable.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt RobotFeedbackQueue.Arn

  # Chat Suggestions Lambda Function
  ChatSuggestionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-chat-suggestions'
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref BucketName
        S3Key: chat_suggestions.zip
      Environment:
        Variables:
          CHAT_HISTORY_TABLE: !Ref ChatHistoryTable
      Timeout: 30
      MemorySize: 256

  # Robot Feedback Lambda Function
  RobotFeedbackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-robot-feedback'
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref BucketName
        S3Key: robot_feedback.zip
      Environment:
        Variables:
          ROBOT_FEEDBACK_TABLE: !Ref RobotFeedbackTable
          ROBOT_FEEDBACK_QUEUE: !Ref RobotFeedbackQueue
      Timeout: 30
      MemorySize: 256

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: 'Robot Agentic API'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  ChatSuggestionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: chat-suggestions

  RobotFeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: robot-feedback

  # API Gateway Methods
  ChatSuggestionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ChatSuggestionsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatSuggestionsFunction.Arn}/invocations'

  RobotFeedbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RobotFeedbackResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RobotFeedbackFunction.Arn}/invocations'

  # OPTIONS methods for CORS
  ChatSuggestionsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ChatSuggestionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  RobotFeedbackOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RobotFeedbackResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda permissions for API Gateway
  ChatSuggestionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatSuggestionsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  RobotFeedbackPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RobotFeedbackFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatSuggestionsMethod
      - RobotFeedbackMethod
      - ChatSuggestionsOptionsMethod
      - RobotFeedbackOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ChatSuggestionsEndpoint:
    Description: 'Chat Suggestions endpoint'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/chat-suggestions'

  RobotFeedbackEndpoint:
    Description: 'Robot Feedback endpoint'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/robot-feedback'

  RobotFeedbackQueueUrl:
    Description: 'SQS Queue URL for robot feedback'
    Value: !Ref RobotFeedbackQueue
    Export:
      Name: !Sub '${AWS::StackName}-RobotFeedbackQueueUrl'

  ChatHistoryTableName:
    Description: 'DynamoDB table name for chat history'
    Value: !Ref ChatHistoryTable
    Export:
      Name: !Sub '${AWS::StackName}-ChatHistoryTableName'

  RobotFeedbackTableName:
    Description: 'DynamoDB table name for robot feedback'
    Value: !Ref RobotFeedbackTable
    Export:
      Name: !Sub '${AWS::StackName}-RobotFeedbackTableName'
